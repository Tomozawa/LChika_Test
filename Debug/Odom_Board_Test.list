
Odom_Board_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800207c  0800207c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002090  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002090  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3c6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fab  00000000  00000000  0002d3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a96d  00000000  00000000  00030950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2d9  00000000  00000000  0004b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e50  00000000  00000000  00057596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec3e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  000ec438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002034 	.word	0x08002034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002034 	.word	0x08002034

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe18 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f984 	bl	8000464 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f886 	bl	800026c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000160:	f000 f8d8 	bl	8000314 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000164:	f000 f92a 	bl	80003bc <MX_TIM4_Init>
  MX_CAN_Init();
 8000168:	f000 f84a 	bl	8000200 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  wrapper_cpp();
 800016c:	f000 fd14 	bl	8000b98 <wrapper_cpp>
 8000170:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b090      	sub	sp, #64	; 0x40
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f001 ff4d 	bl	8002024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000198:	2301      	movs	r3, #1
 800019a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a2:	2300      	movs	r3, #0
 80001a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 f9be 	bl	8001540 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ca:	f000 f997 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fc2b 	bl	8001a44 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f4:	f000 f982 	bl	80004fc <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_CAN_Init+0x64>)
 8000206:	4a18      	ldr	r2, [pc, #96]	; (8000268 <MX_CAN_Init+0x68>)
 8000208:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <MX_CAN_Init+0x64>)
 800020c:	2202      	movs	r2, #2
 800020e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_CAN_Init+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <MX_CAN_Init+0x64>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_CAN_Init+0x64>)
 800021e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000222:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_CAN_Init+0x64>)
 8000226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800022a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <MX_CAN_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_CAN_Init+0x64>)
 8000234:	2200      	movs	r2, #0
 8000236:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_CAN_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_CAN_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <MX_CAN_Init+0x64>)
 8000252:	f000 fdf9 	bl	8000e48 <HAL_CAN_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800025c:	f000 f94e 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	40006400 	.word	0x40006400

0800026c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08c      	sub	sp, #48	; 0x30
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	2224      	movs	r2, #36	; 0x24
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fed2 	bl	8002024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000288:	4b21      	ldr	r3, [pc, #132]	; (8000310 <MX_TIM2_Init+0xa4>)
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <MX_TIM2_Init+0xa4>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <MX_TIM2_Init+0xa4>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MX_TIM2_Init+0xa4>)
 800029e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <MX_TIM2_Init+0xa4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <MX_TIM2_Init+0xa4>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002c8:	2301      	movs	r3, #1
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002d4:	f107 030c 	add.w	r3, r7, #12
 80002d8:	4619      	mov	r1, r3
 80002da:	480d      	ldr	r0, [pc, #52]	; (8000310 <MX_TIM2_Init+0xa4>)
 80002dc:	f001 fd0e 	bl	8001cfc <HAL_TIM_Encoder_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80002e6:	f000 f909 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_TIM2_Init+0xa4>)
 80002f8:	f001 fe04 	bl	8001f04 <HAL_TIMEx_MasterConfigSynchronization>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000302:	f000 f8fb 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3730      	adds	r7, #48	; 0x30
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000050 	.word	0x20000050

08000314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08c      	sub	sp, #48	; 0x30
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	2224      	movs	r2, #36	; 0x24
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fe7e 	bl	8002024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <MX_TIM3_Init+0xa0>)
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <MX_TIM3_Init+0xa4>)
 8000334:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000336:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <MX_TIM3_Init+0xa0>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_TIM3_Init+0xa0>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_TIM3_Init+0xa0>)
 8000344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000348:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_TIM3_Init+0xa0>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_TIM3_Init+0xa0>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000356:	2301      	movs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800035e:	2301      	movs	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800036a:	2300      	movs	r3, #0
 800036c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800036e:	2301      	movs	r3, #1
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_TIM3_Init+0xa0>)
 8000382:	f001 fcbb 	bl	8001cfc <HAL_TIM_Encoder_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800038c:	f000 f8b6 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_TIM3_Init+0xa0>)
 800039e:	f001 fdb1 	bl	8001f04 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80003a8:	f000 f8a8 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3730      	adds	r7, #48	; 0x30
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000098 	.word	0x20000098
 80003b8:	40000400 	.word	0x40000400

080003bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2224      	movs	r2, #36	; 0x24
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fe2a 	bl	8002024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_TIM4_Init+0xa0>)
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <MX_TIM4_Init+0xa4>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_TIM4_Init+0xa0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_TIM4_Init+0xa0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM4_Init+0xa0>)
 80003ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM4_Init+0xa0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_TIM4_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003fe:	2301      	movs	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000416:	2301      	movs	r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <MX_TIM4_Init+0xa0>)
 800042a:	f001 fc67 	bl	8001cfc <HAL_TIM_Encoder_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000434:	f000 f862 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_TIM4_Init+0xa0>)
 8000446:	f001 fd5d 	bl	8001f04 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000450:	f000 f854 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3730      	adds	r7, #48	; 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000e0 	.word	0x200000e0
 8000460:	40000800 	.word	0x40000800

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_GPIO_Init+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <MX_GPIO_Init+0x90>)
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0320 	and.w	r3, r3, #32
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x90>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_GPIO_Init+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <MX_GPIO_Init+0x94>)
 80004c8:	f001 f822 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80004cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_GPIO_Init+0x94>)
 80004e6:	f000 fe8f 	bl	8001208 <HAL_GPIO_Init>

}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010c00 	.word	0x40010c00

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_MspInit+0x5c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x5c>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_MspInit+0x60>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_MspInit+0x60>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_CAN_MspInit+0x8c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d131      	bne.n	80005f0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_CAN_MspInit+0x90>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <HAL_CAN_MspInit+0x90>)
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000596:	61d3      	str	r3, [r2, #28]
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_CAN_MspInit+0x90>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_CAN_MspInit+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_CAN_MspInit+0x90>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_CAN_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <HAL_CAN_MspInit+0x94>)
 80005d2:	f000 fe19 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2303      	movs	r3, #3
 80005e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_CAN_MspInit+0x94>)
 80005ec:	f000 fe0c 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40006400 	.word	0x40006400
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000622:	d124      	bne.n	800066e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	61d3      	str	r3, [r2, #28]
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a36      	ldr	r2, [pc, #216]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000654:	2303      	movs	r3, #3
 8000656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4619      	mov	r1, r3
 8000666:	482e      	ldr	r0, [pc, #184]	; (8000720 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000668:	f000 fdce 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800066c:	e052      	b.n	8000714 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <HAL_TIM_Encoder_MspInit+0x120>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d124      	bne.n	80006c2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	61d3      	str	r3, [r2, #28]
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a8:	23c0      	movs	r3, #192	; 0xc0
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4619      	mov	r1, r3
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <HAL_TIM_Encoder_MspInit+0x11c>)
 80006bc:	f000 fda4 	bl	8001208 <HAL_GPIO_Init>
}
 80006c0:	e028      	b.n	8000714 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM4)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <HAL_TIM_Encoder_MspInit+0x124>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d123      	bne.n	8000714 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	61d3      	str	r3, [r2, #28]
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_TIM_Encoder_MspInit+0x118>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006fc:	23c0      	movs	r3, #192	; 0xc0
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4619      	mov	r1, r3
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <HAL_TIM_Encoder_MspInit+0x128>)
 8000710:	f000 fd7a 	bl	8001208 <HAL_GPIO_Init>
}
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	; 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	40000400 	.word	0x40000400
 8000728:	40000800 	.word	0x40000800
 800072c:	40010c00 	.word	0x40010c00

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 fb4b 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}

0800077e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <_ZN6CRSLib3Can5Stm326RM000810decode_mirEm>:
		Fifo0,
		Fifo1
	};

	[[nodiscard]] inline constexpr u32 decode_mir(const u32 mir) noexcept
	{
 800078a:	b480      	push	{r7}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
		constexpr u32 shift_exid = 3U;
 8000792:	2303      	movs	r3, #3
 8000794:	60fb      	str	r3, [r7, #12]
		if(mir & RegisterMap::MIR::IDE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <_ZN6CRSLib3Can5Stm326RM000810decode_mirEm+0x1c>
		{
			return mir >> shift_exid;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	08db      	lsrs	r3, r3, #3
 80007a4:	e001      	b.n	80007aa <_ZN6CRSLib3Can5Stm326RM000810decode_mirEm+0x20>
		}
		else
		{
			return (mir & RegisterMap::MIR::STID_EXID) >> RegisterMap::MIR::shiftSTID_EXID;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	0d5b      	lsrs	r3, r3, #21
		}
	}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <_ZN6CRSLib3Can5Stm326RM000810encode_mirEm>:

	[[nodiscard]] inline constexpr u32 encode_mir(const u32 id) noexcept
	{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
		constexpr u32 shift_exid = 3U;
 80007bc:	2303      	movs	r3, #3
 80007be:	60fb      	str	r3, [r7, #12]
		constexpr u32 shift_stid = 21U;
 80007c0:	2315      	movs	r3, #21
 80007c2:	60bb      	str	r3, [r7, #8]
		// 拡張IDかどうか
		if(id > max_std_id)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007ca:	d304      	bcc.n	80007d6 <_ZN6CRSLib3Can5Stm326RM000810encode_mirEm+0x22>
		{
			return (id << shift_exid) | RegisterMap::MIR::IDE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	e001      	b.n	80007da <_ZN6CRSLib3Can5Stm326RM000810encode_mirEm+0x26>
		}
		else
		{
			return (id << shift_stid);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	055b      	lsls	r3, r3, #21
		}
	}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <_ZN6CRSLib13to_underlyingINS_3Can5Stm326RM00088TestModeEEENSt15underlying_typeIT_E4typeES6_>:
			alignas(T_) byte storage[sizeof(T_)];
		};
	}

	template <class T>
	constexpr std::underlying_type_t<T> to_underlying(T value) noexcept
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	{
		return static_cast<std::underlying_type_t<T>>(value);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
	}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv>:
		TestMode test_mode{TestMode::Normal};
		u8 resyncronization_jump_width{1};
		u8 time_segment_1{15};
		u8 time_segment_2{2};

		constexpr u32 calc_btr() const noexcept
 80007fa:	b590      	push	{r4, r7, lr}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
		{
			return (prescaler - 1) << RegisterMap::BTR::shiftBRP
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	461c      	mov	r4, r3
				| (to_underlying(test_mode) & 0x1 ? RegisterMap::BTR::LBKM : 0)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ffe8 	bl	80007e4 <_ZN6CRSLib13to_underlyingINS_3Can5Stm326RM00088TestModeEEENSt15underlying_typeIT_E4typeES6_>
 8000814:	4603      	mov	r3, r0
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv+0x2a>
 800081e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000822:	e000      	b.n	8000826 <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv+0x2c>
 8000824:	2300      	movs	r3, #0
 8000826:	431c      	orrs	r4, r3
				| (to_underlying(test_mode) & 0x2 ? RegisterMap::BTR::SILM : 0)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffd9 	bl	80007e4 <_ZN6CRSLib13to_underlyingINS_3Can5Stm326RM00088TestModeEEENSt15underlying_typeIT_E4typeES6_>
 8000832:	4603      	mov	r3, r0
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv+0x48>
 800083c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000840:	e000      	b.n	8000844 <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv+0x4a>
 8000842:	2300      	movs	r3, #0
 8000844:	4323      	orrs	r3, r4
				| (resyncronization_jump_width - 1) << RegisterMap::BTR::shiftSJW
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	78d2      	ldrb	r2, [r2, #3]
 800084a:	3a01      	subs	r2, #1
 800084c:	0612      	lsls	r2, r2, #24
 800084e:	4313      	orrs	r3, r2
				| (time_segment_1 - 1) << RegisterMap::BTR::shiftTS1
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	7912      	ldrb	r2, [r2, #4]
 8000854:	3a01      	subs	r2, #1
 8000856:	0412      	lsls	r2, r2, #16
 8000858:	4313      	orrs	r3, r2
				| (time_segment_2 - 1) << RegisterMap::BTR::shiftTS2;
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7952      	ldrb	r2, [r2, #5]
 800085e:	3a01      	subs	r2, #1
 8000860:	0512      	lsls	r2, r2, #20
 8000862:	4313      	orrs	r3, r2
		}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE>:
		bool auto_wake_up{false};
		// bool no_auto_retransmission{false};  /// @todo 未対応
		bool receive_fifo_locked{false};
		bool transmit_fifo_priority{false};

		void apply(CanRegister *const bxcan) const noexcept
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
		{
			BitOperation::change_masked_range(bxcan->BTR, BitTiming::mask, bit_timing.calc_btr());
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f103 041c 	add.w	r4, r3, #28
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ffbb 	bl	80007fa <_ZNK6CRSLib3Can5Stm326RM00089BitTiming8calc_btrEv>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4921      	ldr	r1, [pc, #132]	; (8000910 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0xa4>)
 800088a:	4620      	mov	r0, r4
 800088c:	f000 fa0a 	bl	8000ca4 <_ZN6CRSLib12BitOperation19change_masked_rangeIVmEEvRT_NSt13type_identityIS3_E4typeES7_>

			constexpr u32 mcr_mask = RegisterMap::MCR::DBF | RegisterMap::MCR::TTCM | RegisterMap::MCR::ABOM | RegisterMap::MCR::AWUM | RegisterMap::MCR::RFLM | RegisterMap::MCR::TXFP;
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0xa8>)
 8000892:	60fb      	str	r3, [r7, #12]
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	799b      	ldrb	r3, [r3, #6]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x36>
 800089c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a0:	e000      	b.n	80008a4 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x38>
 80008a2:	2200      	movs	r2, #0
				(time_triggered ? RegisterMap::MCR::TTCM : 0) |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	79db      	ldrb	r3, [r3, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x44>
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	e000      	b.n	80008b2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x46>
 80008b0:	2300      	movs	r3, #0
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 80008b2:	4313      	orrs	r3, r2
				(auto_bus_off_recovery ? RegisterMap::MCR::ABOM : 0) |
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7a12      	ldrb	r2, [r2, #8]
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d001      	beq.n	80008c0 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x54>
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	e000      	b.n	80008c2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x56>
 80008c0:	2200      	movs	r2, #0
				(time_triggered ? RegisterMap::MCR::TTCM : 0) |
 80008c2:	4313      	orrs	r3, r2
				(auto_wake_up ? RegisterMap::MCR::AWUM : 0) |
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	7a52      	ldrb	r2, [r2, #9]
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d001      	beq.n	80008d0 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x64>
 80008cc:	2220      	movs	r2, #32
 80008ce:	e000      	b.n	80008d2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x66>
 80008d0:	2200      	movs	r2, #0
				(auto_bus_off_recovery ? RegisterMap::MCR::ABOM : 0) |
 80008d2:	4313      	orrs	r3, r2
				// (no_auto_retransmission ? RegisterMap::MCR::NART : 0) |
				RegisterMap::MCR::NART |
				(receive_fifo_locked ? RegisterMap::MCR::RFLM : 0) |
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	7a92      	ldrb	r2, [r2, #10]
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d001      	beq.n	80008e0 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x74>
 80008dc:	2208      	movs	r2, #8
 80008de:	e000      	b.n	80008e2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x76>
 80008e0:	2200      	movs	r2, #0
				RegisterMap::MCR::NART |
 80008e2:	4313      	orrs	r3, r2
				(transmit_fifo_priority ? RegisterMap::MCR::TXFP : 0);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	7ad2      	ldrb	r2, [r2, #11]
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d001      	beq.n	80008f0 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x84>
 80008ec:	2204      	movs	r2, #4
 80008ee:	e000      	b.n	80008f2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0x86>
 80008f0:	2200      	movs	r2, #0
				(receive_fifo_locked ? RegisterMap::MCR::RFLM : 0) |
 80008f2:	4313      	orrs	r3, r2
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	60bb      	str	r3, [r7, #8]

			BitOperation::change_masked_range(bxcan->MCR, mcr_mask, new_mcr);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	4905      	ldr	r1, [pc, #20]	; (8000914 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE+0xa8>)
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f9cf 	bl	8000ca4 <_ZN6CRSLib12BitOperation19change_masked_rangeIVmEEvRT_NSt13type_identityIS3_E4typeES7_>
		}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	bf00      	nop
 8000910:	c37f03ff 	.word	0xc37f03ff
 8000914:	000100ec 	.word	0x000100ec

08000918 <_ZN6CRSLib3Can5Stm326RM00086CanBusC1EPNS2_11CanRegisterERKNS2_10CanBusInitE>:
	class CanBus final
	{
		CanRegister * bxcan;

		public:
		CanBus(CanRegister *const bxcan, const CanBusInit& init = {}) noexcept:
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
			bxcan{bxcan}
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	601a      	str	r2, [r3, #0]
		{
			enter_initialization();
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f8fb 	bl	8000b26 <_ZN6CRSLib3Can5Stm326RM00086CanBus20enter_initializationEv>
			leave_sleep();
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f000 f8dc 	bl	8000aee <_ZN6CRSLib3Can5Stm326RM00086CanBus11leave_sleepEv>

			init.apply(bxcan);
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff97 	bl	800086c <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE>

			leave_initialization();
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f000 f90d 	bl	8000b5e <_ZN6CRSLib3Can5Stm326RM00086CanBus20leave_initializationEv>
		}
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE>:
		/// @brief メッセージを送信する。すでに送信バッファが埋まっていたら、新たに追加しようとしたものを含めた中で優先度の最も低いメッセージを破棄する。
		/// @attention 送信が成功したかどうかを監視しない。よってNonAutoRetransmissionモードは未対応。
		/// @param id 
		/// @param data 
		/// @return 破棄が発生したかどうか
		[[nodiscard]] bool post(const u32 id, const DataField& data) const noexcept
 800094e:	b590      	push	{r4, r7, lr}
 8000950:	b08b      	sub	sp, #44	; 0x2c
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
		{
			const u32 code = (bxcan->TSR & RegisterMap::TSR::CODE) >> RegisterMap::TSR::shiftCODE;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	0e1b      	lsrs	r3, r3, #24
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	623b      	str	r3, [r7, #32]
			constexpr u32 shift_tme = 26;
 8000968:	231a      	movs	r3, #26
 800096a:	61fb      	str	r3, [r7, #28]
			
			bool ret = false;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			// 全部埋まっていたなら
			if(!(bxcan->TSR & (1 << (code + shift_tme))))
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	321a      	adds	r2, #26
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d01b      	beq.n	80009ca <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE+0x7c>
			{
				// もともと入っていたほうの優先順位が高いなら
				if(decode_mir(bxcan->TxMailBoxes[code].MIR) > id)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	3318      	adds	r3, #24
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	4413      	add	r3, r2
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fef2 	bl	800078a <_ZN6CRSLib3Can5Stm326RM000810decode_mirEm>
 80009a6:	4602      	mov	r2, r0
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4293      	cmp	r3, r2
 80009ac:	bf34      	ite	cc
 80009ae:	2301      	movcc	r3, #1
 80009b0:	2300      	movcs	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE+0x6e>
				{
					// 今回試みた送信を破棄する
					return false;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e05e      	b.n	8000a7a <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE+0x12c>
				}
				else
				{
					// そうでなければ送信をアボートする
					ret = abort_transmit(code);
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 f85f 	bl	8000a82 <_ZNK6CRSLib3Can5Stm326RM00086CanBus14abort_transmitEm>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			// 送信バッファに書き込む
			{
				// ID設定
				bxcan->TxMailBoxes[code].MIR = encode_mir(id);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681c      	ldr	r4, [r3, #0]
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f7ff fef0 	bl	80007b4 <_ZN6CRSLib3Can5Stm326RM000810encode_mirEm>
 80009d4:	4602      	mov	r2, r0
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	3318      	adds	r3, #24
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4423      	add	r3, r4
 80009de:	601a      	str	r2, [r3, #0]
				// DLC設定
				bxcan->TxMailBoxes[code].MDTR = data.dlc;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7a19      	ldrb	r1, [r3, #8]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	3318      	adds	r3, #24
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	4413      	add	r3, r2
 80009f0:	3304      	adds	r3, #4
 80009f2:	6019      	str	r1, [r3, #0]
				// データ設定
				if(data.dlc <= 4)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7a1b      	ldrb	r3, [r3, #8]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d812      	bhi.n	8000a22 <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE+0xd4>
				{
					u32 tmp;
					std::memcpy(&tmp, data.buffer, data.dlc);
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	461a      	mov	r2, r3
 8000a04:	f107 0318 	add.w	r3, r7, #24
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fafd 	bl	8002008 <memcpy>
					bxcan->TxMailBoxes[code].MDLR = tmp;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6819      	ldr	r1, [r3, #0]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	440b      	add	r3, r1
 8000a1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e01f      	b.n	8000a62 <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE+0x114>
				}
				else
				{
					u32 tmp;
					std::memcpy(&tmp, data.buffer, 4);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	617b      	str	r3, [r7, #20]
					bxcan->TxMailBoxes[code].MDLR = tmp;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	6819      	ldr	r1, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	440b      	add	r3, r1
 8000a34:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a38:	601a      	str	r2, [r3, #0]
					std::memcpy(&tmp, data.buffer + 4, data.dlc - 4);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1d19      	adds	r1, r3, #4
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7a1b      	ldrb	r3, [r3, #8]
 8000a42:	3b04      	subs	r3, #4
 8000a44:	461a      	mov	r2, r3
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fadc 	bl	8002008 <memcpy>
					bxcan->TxMailBoxes[code].MDHR = tmp;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6819      	ldr	r1, [r3, #0]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a60:	601a      	str	r2, [r3, #0]
				}
			}

			// 送信要求
			BitOperation::set_bit(bxcan->TxMailBoxes[code].MIR, RegisterMap::MIR::TXRQ);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	3318      	adds	r3, #24
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f907 	bl	8000c84 <_ZN6CRSLib12BitOperation7set_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>

			return ret;
 8000a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	372c      	adds	r7, #44	; 0x2c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd90      	pop	{r4, r7, pc}

08000a82 <_ZNK6CRSLib3Can5Stm326RM00086CanBus14abort_transmitEm>:
				return {msg};
			}
		}

		private:
		[[nodiscard]] bool abort_transmit(const u32 code) const noexcept
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
		{
			BitOperation::set_bit(bxcan->TSR, RegisterMap::TSR::ABRQ0 << (code << 3));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f103 0208 	add.w	r2, r3, #8
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f000 f8ef 	bl	8000c84 <_ZN6CRSLib12BitOperation7set_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>
			while(!BitOperation::is_bit_clear(bxcan->TSR, RegisterMap::TSR::ABRQ0 << (code << 3)));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4610      	mov	r0, r2
 8000aba:	f000 f91a 	bl	8000cf2 <_ZN6CRSLib12BitOperation12is_bit_clearImEEbT_NSt13type_identityIS2_E4typeE>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d000      	beq.n	8000acc <_ZNK6CRSLib3Can5Stm326RM00086CanBus14abort_transmitEm+0x4a>
 8000aca:	e7ec      	b.n	8000aa6 <_ZNK6CRSLib3Can5Stm326RM00086CanBus14abort_transmitEm+0x24>
			return BitOperation::is_bit_set(bxcan->TSR, RegisterMap::TSR::TXOK0 << (code << 3));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	4610      	mov	r0, r2
 8000ae0:	f000 f918 	bl	8000d14 <_ZN6CRSLib12BitOperation10is_bit_setImEEbT_NSt13type_identityIS2_E4typeE>
 8000ae4:	4603      	mov	r3, r0
		}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN6CRSLib3Can5Stm326RM00086CanBus11leave_sleepEv>:

		void leave_sleep() noexcept
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
		{
			BitOperation::clear_bit(bxcan->MCR, RegisterMap::MCR::SLEEP);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2102      	movs	r1, #2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f8e7 	bl	8000cd0 <_ZN6CRSLib12BitOperation9clear_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>
			while(!BitOperation::is_bit_clear(bxcan->MSR, RegisterMap::MSR::SLAK));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f8f1 	bl	8000cf2 <_ZN6CRSLib12BitOperation12is_bit_clearImEEbT_NSt13type_identityIS2_E4typeE>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d000      	beq.n	8000b1e <_ZN6CRSLib3Can5Stm326RM00086CanBus11leave_sleepEv+0x30>
 8000b1c:	e7f1      	b.n	8000b02 <_ZN6CRSLib3Can5Stm326RM00086CanBus11leave_sleepEv+0x14>
		}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_ZN6CRSLib3Can5Stm326RM00086CanBus20enter_initializationEv>:
		{
			BitOperation::set_bit(bxcan->MCR, RegisterMap::MCR::SLEEP);
			while(!BitOperation::is_bit_set(bxcan->MSR, RegisterMap::MSR::SLAK));
		}

		void enter_initialization() noexcept
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
		{
			BitOperation::set_bit(bxcan->MCR, RegisterMap::MCR::INRQ);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8a5 	bl	8000c84 <_ZN6CRSLib12BitOperation7set_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>
			while(!BitOperation::is_bit_set(bxcan->MSR, RegisterMap::MSR::INAK));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2101      	movs	r1, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8e6 	bl	8000d14 <_ZN6CRSLib12BitOperation10is_bit_setImEEbT_NSt13type_identityIS2_E4typeE>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f083 0301 	eor.w	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d000      	beq.n	8000b56 <_ZN6CRSLib3Can5Stm326RM00086CanBus20enter_initializationEv+0x30>
 8000b54:	e7f1      	b.n	8000b3a <_ZN6CRSLib3Can5Stm326RM00086CanBus20enter_initializationEv+0x14>
		}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_ZN6CRSLib3Can5Stm326RM00086CanBus20leave_initializationEv>:

		void leave_initialization() noexcept
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
		{
			BitOperation::clear_bit(bxcan->MCR, RegisterMap::MCR::INRQ);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f8af 	bl	8000cd0 <_ZN6CRSLib12BitOperation9clear_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>
			while(!BitOperation::is_bit_clear(bxcan->MSR, RegisterMap::MSR::INAK));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f8b9 	bl	8000cf2 <_ZN6CRSLib12BitOperation12is_bit_clearImEEbT_NSt13type_identityIS2_E4typeE>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d000      	beq.n	8000b8e <_ZN6CRSLib3Can5Stm326RM00086CanBus20leave_initializationEv+0x30>
 8000b8c:	e7f1      	b.n	8000b72 <_ZN6CRSLib3Can5Stm326RM00086CanBus20leave_initializationEv+0x14>
		}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <wrapper_cpp>:
volatile EncoderValues encoder_values;

extern "C" {
	extern TIM_HandleTypeDef htim2, htim3, htim4;

	void wrapper_cpp(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
		CanBus can_bus = CanBus{can1};
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <wrapper_cpp+0x68>)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ba8:	1d3a      	adds	r2, r7, #4
 8000baa:	463b      	mov	r3, r7
 8000bac:	4915      	ldr	r1, [pc, #84]	; (8000c04 <wrapper_cpp+0x6c>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff feb2 	bl	8000918 <_ZN6CRSLib3Can5Stm326RM00086CanBusC1EPNS2_11CanRegisterERKNS2_10CanBusInitE>

		init_encoder(htim2);
 8000bb4:	4814      	ldr	r0, [pc, #80]	; (8000c08 <wrapper_cpp+0x70>)
 8000bb6:	f000 f82f 	bl	8000c18 <_Z12init_encoderR17TIM_HandleTypeDef>
		init_encoder(htim3);
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <wrapper_cpp+0x74>)
 8000bbc:	f000 f82c 	bl	8000c18 <_Z12init_encoderR17TIM_HandleTypeDef>
		init_encoder(htim4);
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <wrapper_cpp+0x78>)
 8000bc2:	f000 f829 	bl	8000c18 <_Z12init_encoderR17TIM_HandleTypeDef>

		while(1){
			encoder_values.encoder_1 = htim2.Instance->CNT;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <wrapper_cpp+0x70>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <wrapper_cpp+0x7c>)
 8000bd0:	801a      	strh	r2, [r3, #0]
			encoder_values.encoder_2 = htim3.Instance->CNT;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <wrapper_cpp+0x74>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <wrapper_cpp+0x7c>)
 8000bdc:	805a      	strh	r2, [r3, #2]
			encoder_values.encoder_3 = htim4.Instance->CNT;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <wrapper_cpp+0x78>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <wrapper_cpp+0x7c>)
 8000be8:	809a      	strh	r2, [r3, #4]

			post_u16(0x100, encoder_values.encoder_1, can_bus);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <wrapper_cpp+0x7c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	463a      	mov	r2, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bf8:	f000 f827 	bl	8000c4a <_Z8post_u16mtRN6CRSLib3Can5Stm326RM00086CanBusE>
			encoder_values.encoder_1 = htim2.Instance->CNT;
 8000bfc:	e7e3      	b.n	8000bc6 <wrapper_cpp+0x2e>
 8000bfe:	bf00      	nop
 8000c00:	0800204c 	.word	0x0800204c
 8000c04:	40006400 	.word	0x40006400
 8000c08:	20000050 	.word	0x20000050
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	200000e0 	.word	0x200000e0
 8000c14:	20000128 	.word	0x20000128

08000c18 <_Z12init_encoderR17TIM_HandleTypeDef>:
		}
	}
}

void init_encoder(TIM_HandleTypeDef& htim){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	htim.Instance->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6a1a      	ldr	r2, [r3, #32]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0211 	orr.w	r2, r2, #17
 8000c2e:	621a      	str	r2, [r3, #32]
	htim.Instance->CR1 |= TIM_CR1_CEN;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <_Z8post_u16mtRN6CRSLib3Can5Stm326RM00086CanBusE>:

bool post_u16(unsigned long id, u16 payload, CanBus& can_bus){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b088      	sub	sp, #32
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	460b      	mov	r3, r1
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	817b      	strh	r3, [r7, #10]
	DataField data_field;
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	721a      	strb	r2, [r3, #8]
 8000c64:	897b      	ldrh	r3, [r7, #10]

	std::memcpy(data_field.buffer, &payload, sizeof(payload));
 8000c66:	82bb      	strh	r3, [r7, #20]
	data_field.dlc = sizeof(payload);
 8000c68:	2302      	movs	r3, #2
 8000c6a:	773b      	strb	r3, [r7, #28]

	return can_bus.post(id, data_field);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	461a      	mov	r2, r3
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fe6a 	bl	800094e <_ZNK6CRSLib3Can5Stm326RM00086CanBus4postEmRKNS0_9DataFieldE>
 8000c7a:	4603      	mov	r3, r0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_ZN6CRSLib12BitOperation7set_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>:
#include <type_traits>

namespace CRSLib::BitOperation
{
	template<std::unsigned_integral T>
	inline constexpr void set_bit(T& value, const std::type_identity_t<T> bit) noexcept
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	{
		value = value | bit;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
	}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <_ZN6CRSLib12BitOperation19change_masked_rangeIVmEEvRT_NSt13type_identityIS3_E4typeES7_>:
	{
		return !is_bit_set(value, bit);
	}

	template<std::unsigned_integral T>
	inline constexpr void change_masked_range(T& value, const std::type_identity_t<T> mask, const std::type_identity_t<T> new_value) noexcept
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	{
		value = (value & ~mask) | (new_value & mask);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	601a      	str	r2, [r3, #0]
	}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <_ZN6CRSLib12BitOperation9clear_bitIVmEEvRT_NSt13type_identityIS3_E4typeE>:
	inline constexpr void clear_bit(T& value, const std::type_identity_t<T> bit) noexcept
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
		value = value & ~bit;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	601a      	str	r2, [r3, #0]
	}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_ZN6CRSLib12BitOperation12is_bit_clearImEEbT_NSt13type_identityIS2_E4typeE>:
	[[nodiscard]] inline constexpr bool is_bit_clear(const T value, const std::type_identity_t<T> bit) noexcept
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
		return !is_bit_set(value, bit);
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f808 	bl	8000d14 <_ZN6CRSLib12BitOperation10is_bit_setImEEbT_NSt13type_identityIS2_E4typeE>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f083 0301 	eor.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
	}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZN6CRSLib12BitOperation10is_bit_setImEEbT_NSt13type_identityIS2_E4typeE>:
	[[nodiscard]] inline constexpr bool is_bit_set(const T value, const std::type_identity_t<T> bit) noexcept
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
		return value & bit;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
	}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff fd21 	bl	800077e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d3e:	490c      	ldr	r1, [pc, #48]	; (8000d70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d54:	4c09      	ldr	r4, [pc, #36]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f001 f92d 	bl	8001fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff f9f1 	bl	800014c <main>
  bx lr
 8000d6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d74:	08002084 	.word	0x08002084
  ldr r2, =_sbss
 8000d78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d7c:	20000134 	.word	0x20000134

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 fa03 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fbb2 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fa0d 	bl	80011ee <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f9e3 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x20>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_IncTick+0x20>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000130 	.word	0x20000130

08000e34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <HAL_GetTick+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000130 	.word	0x20000130

08000e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0ed      	b.n	8001036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fb80 	bl	800056c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7c:	f7ff ffda 	bl	8000e34 <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e84:	f7ff ffd6 	bl	8000e34 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90b      	bls.n	8000eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0c5      	b.n	8001036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0e5      	beq.n	8000e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0202 	bic.w	r2, r2, #2
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff ffb4 	bl	8000e34 <HAL_GetTick>
 8000ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ece:	e012      	b.n	8000ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ed0:	f7ff ffb0 	bl	8000e34 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	d90b      	bls.n	8000ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e09f      	b.n	8001036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e5      	bne.n	8000ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e1b      	ldrb	r3, [r3, #24]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7e5b      	ldrb	r3, [r3, #25]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e9b      	ldrb	r3, [r3, #26]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e007      	b.n	8000f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0220 	bic.w	r2, r2, #32
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7edb      	ldrb	r3, [r3, #27]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0210 	bic.w	r2, r2, #16
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0210 	orr.w	r2, r2, #16
 8000faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7f1b      	ldrb	r3, [r3, #28]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0208 	orr.w	r2, r2, #8
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0208 	bic.w	r2, r2, #8
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7f5b      	ldrb	r3, [r3, #29]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0204 	orr.w	r2, r2, #4
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e007      	b.n	8001000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0204 	bic.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	ea42 0103 	orr.w	r1, r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff90 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff49 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff5e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff90 	bl	80010f8 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5f 	bl	80010a4 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb0 	bl	800115c <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b08b      	sub	sp, #44	; 0x2c
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e169      	b.n	80014f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800121c:	2201      	movs	r2, #1
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8158 	bne.w	80014ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a9a      	ldr	r2, [pc, #616]	; (80014a8 <HAL_GPIO_Init+0x2a0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d05e      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001244:	4a98      	ldr	r2, [pc, #608]	; (80014a8 <HAL_GPIO_Init+0x2a0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d875      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800124a:	4a98      	ldr	r2, [pc, #608]	; (80014ac <HAL_GPIO_Init+0x2a4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d058      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001250:	4a96      	ldr	r2, [pc, #600]	; (80014ac <HAL_GPIO_Init+0x2a4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d86f      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001256:	4a96      	ldr	r2, [pc, #600]	; (80014b0 <HAL_GPIO_Init+0x2a8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d052      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 800125c:	4a94      	ldr	r2, [pc, #592]	; (80014b0 <HAL_GPIO_Init+0x2a8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d869      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001262:	4a94      	ldr	r2, [pc, #592]	; (80014b4 <HAL_GPIO_Init+0x2ac>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d04c      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001268:	4a92      	ldr	r2, [pc, #584]	; (80014b4 <HAL_GPIO_Init+0x2ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d863      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800126e:	4a92      	ldr	r2, [pc, #584]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d046      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001274:	4a90      	ldr	r2, [pc, #576]	; (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d85d      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800127a:	2b12      	cmp	r3, #18
 800127c:	d82a      	bhi.n	80012d4 <HAL_GPIO_Init+0xcc>
 800127e:	2b12      	cmp	r3, #18
 8001280:	d859      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <HAL_GPIO_Init+0x80>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08001303 	.word	0x08001303
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012ef 	.word	0x080012ef
 8001294:	08001331 	.word	0x08001331
 8001298:	08001337 	.word	0x08001337
 800129c:	08001337 	.word	0x08001337
 80012a0:	08001337 	.word	0x08001337
 80012a4:	08001337 	.word	0x08001337
 80012a8:	08001337 	.word	0x08001337
 80012ac:	08001337 	.word	0x08001337
 80012b0:	08001337 	.word	0x08001337
 80012b4:	08001337 	.word	0x08001337
 80012b8:	08001337 	.word	0x08001337
 80012bc:	08001337 	.word	0x08001337
 80012c0:	08001337 	.word	0x08001337
 80012c4:	08001337 	.word	0x08001337
 80012c8:	08001337 	.word	0x08001337
 80012cc:	080012e5 	.word	0x080012e5
 80012d0:	080012f9 	.word	0x080012f9
 80012d4:	4a79      	ldr	r2, [pc, #484]	; (80014bc <HAL_GPIO_Init+0x2b4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012da:	e02c      	b.n	8001336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	623b      	str	r3, [r7, #32]
          break;
 80012e2:	e029      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	3304      	adds	r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e024      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e01f      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	330c      	adds	r3, #12
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e01a      	b.n	8001338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800130a:	2304      	movs	r3, #4
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e013      	b.n	8001338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	611a      	str	r2, [r3, #16]
          break;
 8001322:	e009      	b.n	8001338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001324:	2308      	movs	r3, #8
 8001326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	615a      	str	r2, [r3, #20]
          break;
 800132e:	e003      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x130>
          break;
 8001336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d801      	bhi.n	8001342 <HAL_GPIO_Init+0x13a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	e001      	b.n	8001346 <HAL_GPIO_Init+0x13e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3304      	adds	r3, #4
 8001346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d802      	bhi.n	8001354 <HAL_GPIO_Init+0x14c>
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x152>
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	3b08      	subs	r3, #8
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	210f      	movs	r1, #15
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	6a39      	ldr	r1, [r7, #32]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80b1 	beq.w	80014ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a0:	4a48      	ldr	r2, [pc, #288]	; (80014c4 <HAL_GPIO_Init+0x2bc>)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <HAL_GPIO_Init+0x2c0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_GPIO_Init+0x1ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3f      	ldr	r2, [pc, #252]	; (80014cc <HAL_GPIO_Init+0x2c4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00d      	beq.n	80013f0 <HAL_GPIO_Init+0x1e8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3e      	ldr	r2, [pc, #248]	; (80014d0 <HAL_GPIO_Init+0x2c8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d007      	beq.n	80013ec <HAL_GPIO_Init+0x1e4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3d      	ldr	r2, [pc, #244]	; (80014d4 <HAL_GPIO_Init+0x2cc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_GPIO_Init+0x1e0>
 80013e4:	2303      	movs	r3, #3
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f4:	2300      	movs	r3, #0
 80013f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001406:	492f      	ldr	r1, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	492c      	ldr	r1, [pc, #176]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	43db      	mvns	r3, r3
 8001436:	4928      	ldr	r1, [pc, #160]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001438:	4013      	ands	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4922      	ldr	r1, [pc, #136]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	491e      	ldr	r1, [pc, #120]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001460:	4013      	ands	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4918      	ldr	r1, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	4914      	ldr	r1, [pc, #80]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001488:	4013      	ands	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d021      	beq.n	80014dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e021      	b.n	80014ea <HAL_GPIO_Init+0x2e2>
 80014a6:	bf00      	nop
 80014a8:	10320000 	.word	0x10320000
 80014ac:	10310000 	.word	0x10310000
 80014b0:	10220000 	.word	0x10220000
 80014b4:	10210000 	.word	0x10210000
 80014b8:	10120000 	.word	0x10120000
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40011400 	.word	0x40011400
 80014d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_GPIO_Init+0x304>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4909      	ldr	r1, [pc, #36]	; (800150c <HAL_GPIO_Init+0x304>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f ae8e 	bne.w	800121c <HAL_GPIO_Init+0x14>
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	372c      	adds	r7, #44	; 0x2c
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e272      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001560:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00c      	beq.n	8001586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156c:	4b8f      	ldr	r3, [pc, #572]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
 8001578:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d10b      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	4b89      	ldr	r3, [pc, #548]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06c      	beq.n	800166c <HAL_RCC_OscConfig+0x12c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d168      	bne.n	800166c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e24c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x76>
 80015a8:	4b80      	ldr	r3, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a7f      	ldr	r2, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0xbc>
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a71      	ldr	r2, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc0a 	bl	8000e34 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc06 	bl	8000e34 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e200      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xe4>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fbf6 	bl	8000e34 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fbf2 	bl	8000e34 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1ec      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x10c>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4939      	ldr	r1, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fbab 	bl	8000e34 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fba7 	bl	8000e34 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4927      	ldr	r1, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fb8a 	bl	8000e34 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fb86 	bl	8000e34 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e180      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fb6a 	bl	8000e34 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fb66 	bl	8000e34 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e160      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 fa9c 	bl	8001cc0 <RCC_Delay>
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fb50 	bl	8000e34 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fb4c 	bl	8000e34 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e146      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420000 	.word	0x42420000
 80017b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e9      	bne.n	8001798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a6 	beq.w	800191e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a87      	ldr	r2, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7e      	ldr	r2, [pc, #504]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb0d 	bl	8000e34 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fb09 	bl	8000e34 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e103      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x312>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02d      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x334>
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x356>
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fabd 	bl	8000e34 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fab9 	bl	8000e34 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x37e>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff faa7 	bl	8000e34 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff faa3 	bl	8000e34 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e09b      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d061      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d146      	bne.n	80019ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fa77 	bl	8000e34 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fa73 	bl	8000e34 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e06d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4921      	ldr	r1, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a19      	ldr	r1, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	430b      	orrs	r3, r1
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa47 	bl	8000e34 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fa43 	bl	8000e34 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x46a>
 80019c8:	e035      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa30 	bl	8000e34 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa2c 	bl	8000e34 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e026      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x498>
 80019f6:	e01e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e019      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x500>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff f97e 	bl	8000e34 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff f97a 	bl	8000e34 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f8dc 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08002058 	.word	0x08002058
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x36>
 8001c46:	e027      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4a:	613b      	str	r3, [r7, #16]
      break;
 8001c4c:	e027      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0c5b      	lsrs	r3, r3, #17
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	613b      	str	r3, [r7, #16]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	08002068 	.word	0x08002068
 8001cb8:	08002078 	.word	0x08002078
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <RCC_Delay+0x34>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <RCC_Delay+0x38>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0a5b      	lsrs	r3, r3, #9
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cdc:	bf00      	nop
  }
  while (Delay --);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	60fa      	str	r2, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f9      	bne.n	8001cdc <RCC_Delay+0x1c>
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e093      	b.n	8001e38 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fc6d 	bl	8000604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d40:	f023 0307 	bic.w	r3, r3, #7
 8001d44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f000 f875 	bl	8001e40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d9c:	f023 030c 	bic.w	r3, r3, #12
 8001da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	4313      	orrs	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	011a      	lsls	r2, r3, #4
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	031b      	lsls	r3, r3, #12
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4313      	orrs	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00b      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d007      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <TIM_Base_SetConfig+0xbc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0x30>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <TIM_Base_SetConfig+0xc0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d108      	bne.n	8001e82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <TIM_Base_SetConfig+0xbc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0x62>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <TIM_Base_SetConfig+0xc0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <TIM_Base_SetConfig+0xb8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800

08001f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e046      	b.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00e      	beq.n	8001f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d009      	beq.n	8001f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10c      	bne.n	8001f98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800

08001fc0 <__libc_init_array>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	4d0c      	ldr	r5, [pc, #48]	; (8001ff8 <__libc_init_array+0x38>)
 8001fc6:	4c0d      	ldr	r4, [pc, #52]	; (8001ffc <__libc_init_array+0x3c>)
 8001fc8:	1b64      	subs	r4, r4, r5
 8001fca:	10a4      	asrs	r4, r4, #2
 8001fcc:	42a6      	cmp	r6, r4
 8001fce:	d109      	bne.n	8001fe4 <__libc_init_array+0x24>
 8001fd0:	f000 f830 	bl	8002034 <_init>
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	4d0a      	ldr	r5, [pc, #40]	; (8002000 <__libc_init_array+0x40>)
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	; (8002004 <__libc_init_array+0x44>)
 8001fda:	1b64      	subs	r4, r4, r5
 8001fdc:	10a4      	asrs	r4, r4, #2
 8001fde:	42a6      	cmp	r6, r4
 8001fe0:	d105      	bne.n	8001fee <__libc_init_array+0x2e>
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe8:	4798      	blx	r3
 8001fea:	3601      	adds	r6, #1
 8001fec:	e7ee      	b.n	8001fcc <__libc_init_array+0xc>
 8001fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff2:	4798      	blx	r3
 8001ff4:	3601      	adds	r6, #1
 8001ff6:	e7f2      	b.n	8001fde <__libc_init_array+0x1e>
 8001ff8:	0800207c 	.word	0x0800207c
 8001ffc:	0800207c 	.word	0x0800207c
 8002000:	0800207c 	.word	0x0800207c
 8002004:	08002080 	.word	0x08002080

08002008 <memcpy>:
 8002008:	440a      	add	r2, r1
 800200a:	4291      	cmp	r1, r2
 800200c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002010:	d100      	bne.n	8002014 <memcpy+0xc>
 8002012:	4770      	bx	lr
 8002014:	b510      	push	{r4, lr}
 8002016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800201a:	4291      	cmp	r1, r2
 800201c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002020:	d1f9      	bne.n	8002016 <memcpy+0xe>
 8002022:	bd10      	pop	{r4, pc}

08002024 <memset>:
 8002024:	4603      	mov	r3, r0
 8002026:	4402      	add	r2, r0
 8002028:	4293      	cmp	r3, r2
 800202a:	d100      	bne.n	800202e <memset+0xa>
 800202c:	4770      	bx	lr
 800202e:	f803 1b01 	strb.w	r1, [r3], #1
 8002032:	e7f9      	b.n	8002028 <memset+0x4>

08002034 <_init>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	bf00      	nop
 8002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203a:	bc08      	pop	{r3}
 800203c:	469e      	mov	lr, r3
 800203e:	4770      	bx	lr

08002040 <_fini>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	bf00      	nop
 8002044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002046:	bc08      	pop	{r3}
 8002048:	469e      	mov	lr, r3
 800204a:	4770      	bx	lr
